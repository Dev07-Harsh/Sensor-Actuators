// Study of DHT11 Sensor with Arduino UNO and I2C LCD Display
// 
// Hardware Connections:
// DHT11:
//   VCC -> 5V
//   GND -> GND
//   DATA -> Digital Pin 2 (with a 10K pull-up resistor to 5V)
// I2C LCD (16x2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>

// DHT sensor configuration
#define DHTPIN 2       // Digital pin connected to the DHT11 data pin
#define DHTTYPE DHT11  // DHT 11 sensor

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);
// Initialize DHT sensor object
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Start I2C communication and LCD
  lcd.init();            
  lcd.backlight();       

  // Start DHT sensor
  dht.begin();           

  // Display a startup message
  lcd.setCursor(0, 0);
  lcd.print("DHT11 Study");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read humidity and temperature values
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature(); // Celsius by default

  // Clear the previous display
  lcd.clear();

  // Check if readings are valid
  if (isnan(humidity) || isnan(temperature)) {
    lcd.setCursor(0, 0);
    lcd.print("Read error");
  } else {
    // Display temperature on the first line
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(temperature);
    lcd.write(223);       // Degree symbol
    lcd.print("C");

    // Display humidity on the second line
    lcd.setCursor(0, 1);
    lcd.print("Hum:  ");
    lcd.print(humidity);
    lcd.print("%");
  }

  // Wait before updating the display again
  delay(2000);
}


// Study of HC-SR04 Ultrasonic Sensor with Arduino UNO and I2C LCD Display
// 
// Hardware Connections:
// HC-SR04 Ultrasonic Sensor:
//   VCC   -> 5V
//   GND   -> GND
//   Trig  -> Digital Pin 2
//   Echo  -> Digital Pin 3
// I2C LCD (16x2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Ultrasonic sensor pins
const int trigPin = 2;
const int echoPin = 3;

void setup() {
  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Configure sensor pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Welcome message
  lcd.setCursor(0, 0);
  lcd.print("HC-SR04 Study");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Send 10µs pulse to trigger pin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read echo pulse duration in microseconds
  long duration = pulseIn(echoPin, HIGH, 30000); // timeout after 30ms

  // Calculate distance in cm (sound speed ~343 m/s)
  float distanceCm = (duration / 2.0) * 0.0343;

  // Clear display
  lcd.clear();

  // Check for out-of-range or timeout (duration==0)
  if (duration == 0 || distanceCm > 400) {
    lcd.setCursor(0, 0);
    lcd.print("Out of range");
  } else {
    // Display distance on first line
    lcd.setCursor(0, 0);
    lcd.print("Distance:");
    lcd.setCursor(0, 1);
    lcd.print(distanceCm);
    lcd.print(" cm");
  }

  // Wait before next reading
  delay(500);
}

// Study of IR Obstacle Sensor with Arduino UNO and I2C LCD Display
// 
// Hardware Connections:
// IR Obstacle Sensor Module (e.g., FC-51):
//   VCC  -> 5V
//   GND  -> GND
//   OUT  -> Digital Pin 2
// I2C LCD (16x2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// IR sensor pin
const int irPin = 2;

void setup() {
  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Configure IR sensor pin
  pinMode(irPin, INPUT);

  // Welcome message
  lcd.setCursor(0, 0);
  lcd.print("IR Sensor Study");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read sensor output (LOW when obstacle detected for many modules)
  int state = digitalRead(irPin);

  // Clear display
  lcd.clear();

  // Display status
  lcd.setCursor(0, 0);
  if (state == LOW) {
    lcd.print("Obstacle Detected");
  } else {
    lcd.print("Path Clear");
  }

  // Optional: show raw state on second line
  lcd.setCursor(0, 1);
  lcd.print("State: ");
  lcd.print(state);

  // Short delay before next reading
  delay(200);
}



// Study of BMP180 Barometric Pressure & Temperature Sensor with Arduino UNO and I2C LCD Display
// 
// Hardware Connections:
// BMP180 Sensor Module (I2C):
//   VCC -> 3.3V (or 5V depending on module)
//   GND -> GND
//   SDA -> A4
//   SCL -> A5
// I2C LCD (16×2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_BMP085.h>

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);
// Initialize BMP180 sensor
Adafruit_BMP085 bmp;

void setup() {
  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Initialize BMP180
  if (!bmp.begin()) {
    lcd.setCursor(0, 0);
    lcd.print("BMP180 Error");
    lcd.setCursor(0, 1);
    lcd.print("Sensor not found");
    while (1);
  }

  // Startup message
  lcd.setCursor(0, 0);
  lcd.print("BMP180 Study");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read temperature in °C
  float temperature = bmp.readTemperature();
  // Read pressure in hPa (Pa/100)
  float pressure = bmp.readPressure() / 100.0;
  // Calculate approximate altitude in meters
  float altitude = bmp.readAltitude(101325);

  // Clear display
  lcd.clear();

  // Display Temperature
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(temperature, 1);
  lcd.write(223); // degree symbol
  lcd.print("C");

  // Display Pressure on second line
  lcd.setCursor(0, 1);
  lcd.print("Pres: ");
  lcd.print(pressure, 1);
  lcd.print("hPa");

  delay(2000);
  
  // Optionally display altitude after pressure display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Alt: ");
  lcd.print(altitude, 1);
  lcd.print(" m");
  delay(2000);
}


// Study of Soil Moisture Sensor with Arduino UNO and I2C LCD Display
//
// Hardware Connections:
// Soil Moisture Sensor Module (Analog):
//   VCC  -> 5V
//   GND  -> GND
//   AOUT -> Analog Pin A0
// I2C LCD (16×2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Soil moisture analog pin
const int moisturePin = A0;

void setup() {
  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Configure moisture pin (optional, analog pins default to input)
  pinMode(moisturePin, INPUT);

  // Startup message
  lcd.setCursor(0, 0);
  lcd.print("Soil Moisture");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read raw analog value (0-1023)
  int sensorValue = analogRead(moisturePin);
  
  // Convert to percentage (wet -> dry mapping may vary)
  // Here: 0 (fully wet) -> 100%, 1023 (fully dry) -> 0%
  float moisturePercent = map(sensorValue, 1023, 0, 0, 100);

  // Clear display
  lcd.clear();

  // Display moisture percentage
  lcd.setCursor(0, 0);
  lcd.print("Moisture: ");
  lcd.print(moisturePercent, 1);
  lcd.print("%");

  // Display raw sensor value
  lcd.setCursor(0, 1);
  lcd.print("Raw: ");
  lcd.print(sensorValue);

  // Wait before next reading
  delay(2000);
}


// Study of MQ-2 Gas Sensor with Arduino UNO and I2C LCD Display
// 
// Hardware Connections:
// MQ-2 Gas Sensor Module:
//   VCC  -> 5V
//   GND  -> GND
//   AOUT -> Analog Pin A0
// I2C LCD (16×2):
//   SDA -> A4
//   SCL -> A5
//   VCC -> 5V
//   GND -> GND

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Initialize LCD at I2C address 0x27, 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// MQ-2 sensor analog pin
const int gasPin = A0;

void setup() {
  // Initialize LCD
  lcd.init();
  lcd.backlight();

  // Configure gas sensor pin (optional)
  pinMode(gasPin, INPUT);

  // Startup message
  lcd.setCursor(0, 0);
  lcd.print("MQ-2 Gas Sensor");
  lcd.setCursor(0, 1);
  lcd.print("Initializing...");
  delay(2000);
}

void loop() {
  // Read raw analog value (0-1023)
  int sensorValue = analogRead(gasPin);

  // Convert to voltage (0-5V)
  float voltage = sensorValue * (5.0 / 1023.0);

  // Optionally approximate gas concentration (relative units)
  // Note: Conversion to ppm requires calibration curves specific to gas type
  float gasLevel = map(sensorValue, 0, 1023, 0, 100);

  // Clear display
  lcd.clear();

  // Display sensor voltage
  lcd.setCursor(0, 0);
  lcd.print("Voltage: ");
  lcd.print(voltage, 2);
  lcd.print("V");

  // Display gas level percentage
  lcd.setCursor(0, 1);
  lcd.print("GasLvl: ");
  lcd.print(gasLevel, 1);
  lcd.print("%");

  // Wait before next reading
  delay(2000);
}



// Study of 7-Segment Display with Arduino UNO
//
// Hardware Connections (Common Cathode 7-Segment):
//   Segment A -> Digital Pin 2
//   Segment B -> Digital Pin 3
//   Segment C -> Digital Pin 4
//   Segment D -> Digital Pin 5
//   Segment E -> Digital Pin 6
//   Segment F -> Digital Pin 7
//   Segment G -> Digital Pin 8
//   Common Cathode Pins -> GND

// Define segment pins in order A, B, C, D, E, F, G
const int segmentPins[7] = {2, 3, 4, 5, 6, 7, 8};

// Digit to segment mapping (1 = ON, 0 = OFF)
// Order of segments: A, B, C, D, E, F, G
const bool digitPatterns[10][7] = {
  {1,1,1,1,1,1,0}, // 0
  {0,1,1,0,0,0,0}, // 1
  {1,1,0,1,1,0,1}, // 2
  {1,1,1,1,0,0,1}, // 3
  {0,1,1,0,0,1,1}, // 4
  {1,0,1,1,0,1,1}, // 5
  {1,0,1,1,1,1,1}, // 6
  {1,1,1,0,0,0,0}, // 7
  {1,1,1,1,1,1,1}, // 8
  {1,1,1,1,0,1,1}  // 9
};

void setup() {
  // Initialize all segment pins as outputs
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
}

void loop() {
  // Loop through digits 0 to 9
  for (int num = 0; num < 10; num++) {
    // Set each segment according to the pattern
    for (int seg = 0; seg < 7; seg++) {
      digitalWrite(segmentPins[seg], digitPatterns[num][seg] ? HIGH : LOW);
    }
    delay(1000);  // Display each digit for 1 second
  }
}



#!/usr/bin/env python3
import time
from Adafruit_BMP.BMP085 import BMP085  # <- classic driver

def setup_sensor():
    # The constructor will auto-detect I2C bus and address 0x77
    return BMP085()

def read_and_print(sensor):
    temp_c    = sensor.readTemperature()  # °C
    pressure  = sensor.readPressure()     # Pa
    altitude  = sensor.readAltitude()     # m (uses sea-level default 1013.25 hPa)
    print(f"Temp: {temp_c:0.1f} °C | Pressure: {pressure/100:0.1f} hPa | Altitude: {altitude:0.1f} m")

def main():
    print("Starting BMP180 readings… (Ctrl+C to exit)")
    sensor = setup_sensor()
    try:
        while True:
            read_and_print(sensor)
            time.sleep(2)
    except KeyboardInterrupt:
        print("Exiting…")

if __name__ == "__main__":
    main()